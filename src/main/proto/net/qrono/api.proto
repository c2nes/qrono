syntax = "proto3";

package net.qrono;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "git.thunes.dev/queue-server/gateway/proto;proto";

service QueueServer {
  rpc Enqueue (EnqueueRequest) returns (EnqueueResponse) {
    option (google.api.http) = {
      post: "/v1/queues/{queue}:enqueue"
      body: "*"
    };
  }

  rpc EnqueueStream (stream EnqueueRequest) returns (stream EnqueueResponse);

  rpc Dequeue (DequeueRequest) returns (Item) {
    option (google.api.http) = {
      post: "/v1/queues/{queue}:dequeue"
      body: "*"
    };
  }

  rpc Requeue (RequeueRequest) returns (RequeueResponse) {
    option (google.api.http) = {
      post: "/v1/queues/{queue}:requeue"
      body: "*"
    };
  }

  rpc Release (ReleaseRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/queues/{queue}:release"
      body: "*"
    };
  }

  rpc Peek (PeekRequest) returns (Item) {
    option (google.api.http) = {
      get: "/v1/queues/{queue}:peek"
    };
  }

  rpc GetQueueInfo (GetQueueInfoRequest) returns (QueueInfo) {
    option (google.api.http) = {
      get: "/v1/queues/{queue}"
    };
  }

  rpc DropQueue (DropQueueRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/queues/{queue}:drop"
    };
  }

  rpc CompactQueue (CompactQueueRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/queues/{queue}:compact"
    };
  }
}

message EnqueueRequest {
  string queue = 1;
  bytes value = 2;
  google.protobuf.Timestamp deadline = 3;
}

message EnqueueResponse {
  uint64 id = 1;
  google.protobuf.Timestamp deadline = 2;
}

// Blocking?
message DequeueRequest {
  string queue = 1;
}

message PeekRequest {
  string queue = 1;
}

// 1 8 8 4 4 8 8
// 8 8 8 8 4 4 1
// 4*8 + 2*4 + 1
// 5*8 + 1
// 41
message Item {
  uint64 id = 1;
  google.protobuf.Timestamp deadline = 2;
  bytes value = 3;
  Stats stats = 4;
}

message Stats {
  uint32 dequeue_count = 1; // increments on each dequeue
  google.protobuf.Timestamp enqueue_time = 2; // immutable
  google.protobuf.Timestamp requeue_time = 3; // updated on requeue
}

message RequeueRequest {
  string queue = 1;
  uint64 id = 2;
  google.protobuf.Timestamp deadline = 3;
}

message RequeueResponse {
  google.protobuf.Timestamp deadline = 1;
}

message ReleaseRequest {
  string queue = 1;
  uint64 id = 2;
}

message GetQueueInfoRequest {
  string queue = 1;
}

message QueueInfo {
  string name = 1;
  uint64 pending = 2;
  uint64 dequeued = 3;
}

message DropQueueRequest {
  string queue = 1;
}

message CompactQueueRequest {
  string queue = 1;
}
