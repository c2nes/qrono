// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: proto/api.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EnqueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue    string               `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	Value    []byte               `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Deadline *timestamp.Timestamp `protobuf:"bytes,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *EnqueueRequest) Reset() {
	*x = EnqueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueRequest) ProtoMessage() {}

func (x *EnqueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueRequest.ProtoReflect.Descriptor instead.
func (*EnqueueRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{0}
}

func (x *EnqueueRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *EnqueueRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EnqueueRequest) GetDeadline() *timestamp.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

type EnqueueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Deadline *timestamp.Timestamp `protobuf:"bytes,2,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *EnqueueResponse) Reset() {
	*x = EnqueueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueResponse) ProtoMessage() {}

func (x *EnqueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueResponse.ProtoReflect.Descriptor instead.
func (*EnqueueResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{1}
}

func (x *EnqueueResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EnqueueResponse) GetDeadline() *timestamp.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

// Blocking?
type DequeueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
}

func (x *DequeueRequest) Reset() {
	*x = DequeueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueRequest) ProtoMessage() {}

func (x *DequeueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueRequest.ProtoReflect.Descriptor instead.
func (*DequeueRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{2}
}

func (x *DequeueRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

// 1 8 8 4 4 8 8
// 8 8 8 8 4 4 1
// 4*8 + 2*4 + 1
// 5*8 + 1
// 41
type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Deadline *timestamp.Timestamp `protobuf:"bytes,2,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Value    []byte               `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Stats    *Stats               `protobuf:"bytes,4,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{3}
}

func (x *Item) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Item) GetDeadline() *timestamp.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *Item) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Item) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DequeueCount uint32               `protobuf:"varint,1,opt,name=dequeue_count,json=dequeueCount,proto3" json:"dequeue_count,omitempty"` // increments on each dequeue
	EnqueueTime  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=enqueue_time,json=enqueueTime,proto3" json:"enqueue_time,omitempty"`     // immutable
	RequeueTime  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=requeue_time,json=requeueTime,proto3" json:"requeue_time,omitempty"`     // updated on requeue
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{4}
}

func (x *Stats) GetDequeueCount() uint32 {
	if x != nil {
		return x.DequeueCount
	}
	return 0
}

func (x *Stats) GetEnqueueTime() *timestamp.Timestamp {
	if x != nil {
		return x.EnqueueTime
	}
	return nil
}

func (x *Stats) GetRequeueTime() *timestamp.Timestamp {
	if x != nil {
		return x.RequeueTime
	}
	return nil
}

type RequeueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue    string               `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	Id       uint64               `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Deadline *timestamp.Timestamp `protobuf:"bytes,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *RequeueRequest) Reset() {
	*x = RequeueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequeueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequeueRequest) ProtoMessage() {}

func (x *RequeueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequeueRequest.ProtoReflect.Descriptor instead.
func (*RequeueRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{5}
}

func (x *RequeueRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *RequeueRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RequeueRequest) GetDeadline() *timestamp.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

type RequeueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequeueResponse) Reset() {
	*x = RequeueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequeueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequeueResponse) ProtoMessage() {}

func (x *RequeueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequeueResponse.ProtoReflect.Descriptor instead.
func (*RequeueResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{6}
}

type ReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	Id    uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReleaseRequest) Reset() {
	*x = ReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseRequest) ProtoMessage() {}

func (x *ReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseRequest.ProtoReflect.Descriptor instead.
func (*ReleaseRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{7}
}

func (x *ReleaseRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *ReleaseRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetQueueInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
}

func (x *GetQueueInfoRequest) Reset() {
	*x = GetQueueInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueueInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueueInfoRequest) ProtoMessage() {}

func (x *GetQueueInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueueInfoRequest.ProtoReflect.Descriptor instead.
func (*GetQueueInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetQueueInfoRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

type QueueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pending  uint64 `protobuf:"varint,2,opt,name=pending,proto3" json:"pending,omitempty"`
	Dequeued uint64 `protobuf:"varint,3,opt,name=dequeued,proto3" json:"dequeued,omitempty"`
}

func (x *QueueInfo) Reset() {
	*x = QueueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueInfo) ProtoMessage() {}

func (x *QueueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueInfo.ProtoReflect.Descriptor instead.
func (*QueueInfo) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{9}
}

func (x *QueueInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueueInfo) GetPending() uint64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

func (x *QueueInfo) GetDequeued() uint64 {
	if x != nil {
		return x.Dequeued
	}
	return 0
}

type DropQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
}

func (x *DropQueueRequest) Reset() {
	*x = DropQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropQueueRequest) ProtoMessage() {}

func (x *DropQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropQueueRequest.ProtoReflect.Descriptor instead.
func (*DropQueueRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{10}
}

func (x *DropQueueRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

// A segment is an ordered sequence of pending items and tombstones
type Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Segment) Reset() {
	*x = Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{11}
}

type GlobalState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch *timestamp.Timestamp `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *GlobalState) Reset() {
	*x = GlobalState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalState) ProtoMessage() {}

func (x *GlobalState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalState.ProtoReflect.Descriptor instead.
func (*GlobalState) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{12}
}

func (x *GlobalState) GetEpoch() *timestamp.Timestamp {
	if x != nil {
		return x.Epoch
	}
	return nil
}

type Segment_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingCount   uint64             `protobuf:"varint,1,opt,name=pending_count,json=pendingCount,proto3" json:"pending_count,omitempty"`
	TombstoneCount uint64             `protobuf:"varint,2,opt,name=tombstone_count,json=tombstoneCount,proto3" json:"tombstone_count,omitempty"`
	LastKey        *Segment_Entry_Key `protobuf:"bytes,3,opt,name=last_key,json=lastKey,proto3" json:"last_key,omitempty"`
	MaxId          uint64             `protobuf:"varint,4,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
}

func (x *Segment_Header) Reset() {
	*x = Segment_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment_Header) ProtoMessage() {}

func (x *Segment_Header) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment_Header.ProtoReflect.Descriptor instead.
func (*Segment_Header) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Segment_Header) GetPendingCount() uint64 {
	if x != nil {
		return x.PendingCount
	}
	return 0
}

func (x *Segment_Header) GetTombstoneCount() uint64 {
	if x != nil {
		return x.TombstoneCount
	}
	return 0
}

func (x *Segment_Header) GetLastKey() *Segment_Entry_Key {
	if x != nil {
		return x.LastKey
	}
	return nil
}

func (x *Segment_Header) GetMaxId() uint64 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

type Segment_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//	*Segment_Entry_Pending
	//	*Segment_Entry_Tombstone
	Entry isSegment_Entry_Entry `protobuf_oneof:"entry"`
}

func (x *Segment_Entry) Reset() {
	*x = Segment_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment_Entry) ProtoMessage() {}

func (x *Segment_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment_Entry.ProtoReflect.Descriptor instead.
func (*Segment_Entry) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{11, 1}
}

func (m *Segment_Entry) GetEntry() isSegment_Entry_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *Segment_Entry) GetPending() *Item {
	if x, ok := x.GetEntry().(*Segment_Entry_Pending); ok {
		return x.Pending
	}
	return nil
}

func (x *Segment_Entry) GetTombstone() *Segment_Entry_Key {
	if x, ok := x.GetEntry().(*Segment_Entry_Tombstone); ok {
		return x.Tombstone
	}
	return nil
}

type isSegment_Entry_Entry interface {
	isSegment_Entry_Entry()
}

type Segment_Entry_Pending struct {
	Pending *Item `protobuf:"bytes,1,opt,name=pending,proto3,oneof"`
}

type Segment_Entry_Tombstone struct {
	Tombstone *Segment_Entry_Key `protobuf:"bytes,2,opt,name=tombstone,proto3,oneof"`
}

func (*Segment_Entry_Pending) isSegment_Entry_Entry() {}

func (*Segment_Entry_Tombstone) isSegment_Entry_Entry() {}

type Segment_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingCount   uint64             `protobuf:"varint,1,opt,name=pending_count,json=pendingCount,proto3" json:"pending_count,omitempty"`
	TombstoneCount uint64             `protobuf:"varint,2,opt,name=tombstone_count,json=tombstoneCount,proto3" json:"tombstone_count,omitempty"`
	FirstKey       *Segment_Entry_Key `protobuf:"bytes,3,opt,name=first_key,json=firstKey,proto3" json:"first_key,omitempty"`
	LastKey        *Segment_Entry_Key `protobuf:"bytes,4,opt,name=last_key,json=lastKey,proto3" json:"last_key,omitempty"`
	MaxId          uint64             `protobuf:"varint,5,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
}

func (x *Segment_Metadata) Reset() {
	*x = Segment_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment_Metadata) ProtoMessage() {}

func (x *Segment_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment_Metadata.ProtoReflect.Descriptor instead.
func (*Segment_Metadata) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{11, 2}
}

func (x *Segment_Metadata) GetPendingCount() uint64 {
	if x != nil {
		return x.PendingCount
	}
	return 0
}

func (x *Segment_Metadata) GetTombstoneCount() uint64 {
	if x != nil {
		return x.TombstoneCount
	}
	return 0
}

func (x *Segment_Metadata) GetFirstKey() *Segment_Entry_Key {
	if x != nil {
		return x.FirstKey
	}
	return nil
}

func (x *Segment_Metadata) GetLastKey() *Segment_Entry_Key {
	if x != nil {
		return x.LastKey
	}
	return nil
}

func (x *Segment_Metadata) GetMaxId() uint64 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

type Segment_Entry_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Deadline *timestamp.Timestamp `protobuf:"bytes,2,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *Segment_Entry_Key) Reset() {
	*x = Segment_Entry_Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment_Entry_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment_Entry_Key) ProtoMessage() {}

func (x *Segment_Entry_Key) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment_Entry_Key.ProtoReflect.Descriptor instead.
func (*Segment_Entry_Key) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{11, 1, 0}
}

func (x *Segment_Entry_Key) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Segment_Entry_Key) GetDeadline() *timestamp.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

var File_proto_api_proto protoreflect.FileDescriptor

var file_proto_api_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x74, 0x61, 0x62, 0x2e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x74, 0x0a, 0x0e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36,
	0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x59, 0x0a, 0x0f, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x74, 0x61, 0x62, 0x2e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x22, 0xaa, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x0c, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6e, 0x0a,
	0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x11, 0x0a,
	0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x36, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x22, 0x28, 0x0a, 0x10,
	0x44, 0x72, 0x6f, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0x8d, 0x05, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x1a, 0xae, 0x01, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x6d,
	0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x74, 0x61, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x15, 0x0a, 0x06,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x61,
	0x78, 0x49, 0x64, 0x1a, 0xda, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x33, 0x0a,
	0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x74, 0x61, 0x62, 0x2e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x65, 0x77,
	0x74, 0x61, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x1a, 0x4d, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x36, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x1a, 0xf3, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x6d,
	0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x74, 0x61, 0x62, 0x2e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3f,
	0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x74, 0x61, 0x62, 0x2e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x0b, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x32, 0x93, 0x06, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x77, 0x0a, 0x07, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x74, 0x61, 0x62,
	0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x65, 0x77,
	0x74, 0x61, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x7d, 0x3a, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x5a, 0x0a, 0x0d, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x74, 0x61, 0x62, 0x2e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x74,
	0x61, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x6c, 0x0a, 0x07,
	0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72,
	0x65, 0x77, 0x74, 0x61, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x44, 0x65, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x62, 0x72, 0x65, 0x77, 0x74, 0x61, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31,
	0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x7d, 0x3a,
	0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x65, 0x77,
	0x74, 0x61, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62,
	0x72, 0x65, 0x77, 0x74, 0x61, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2f, 0x7b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x7d, 0x3a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x6b, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x74, 0x61, 0x62, 0x2e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x7d, 0x3a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x70, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x74, 0x61, 0x62, 0x2e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62,
	0x72, 0x65, 0x77, 0x74, 0x61, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12,
	0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x7d, 0x12, 0x69, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x74, 0x61, 0x62, 0x2e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2f, 0x7b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x7d, 0x3a, 0x64, 0x72, 0x6f, 0x70, 0x42, 0x31, 0x5a,
	0x2f, 0x67, 0x69, 0x74, 0x2e, 0x74, 0x68, 0x75, 0x6e, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_api_proto_rawDescOnce sync.Once
	file_proto_api_proto_rawDescData = file_proto_api_proto_rawDesc
)

func file_proto_api_proto_rawDescGZIP() []byte {
	file_proto_api_proto_rawDescOnce.Do(func() {
		file_proto_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_api_proto_rawDescData)
	})
	return file_proto_api_proto_rawDescData
}

var file_proto_api_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_api_proto_goTypes = []interface{}{
	(*EnqueueRequest)(nil),      // 0: com.brewtab.queue.EnqueueRequest
	(*EnqueueResponse)(nil),     // 1: com.brewtab.queue.EnqueueResponse
	(*DequeueRequest)(nil),      // 2: com.brewtab.queue.DequeueRequest
	(*Item)(nil),                // 3: com.brewtab.queue.Item
	(*Stats)(nil),               // 4: com.brewtab.queue.Stats
	(*RequeueRequest)(nil),      // 5: com.brewtab.queue.RequeueRequest
	(*RequeueResponse)(nil),     // 6: com.brewtab.queue.RequeueResponse
	(*ReleaseRequest)(nil),      // 7: com.brewtab.queue.ReleaseRequest
	(*GetQueueInfoRequest)(nil), // 8: com.brewtab.queue.GetQueueInfoRequest
	(*QueueInfo)(nil),           // 9: com.brewtab.queue.QueueInfo
	(*DropQueueRequest)(nil),    // 10: com.brewtab.queue.DropQueueRequest
	(*Segment)(nil),             // 11: com.brewtab.queue.Segment
	(*GlobalState)(nil),         // 12: com.brewtab.queue.GlobalState
	(*Segment_Header)(nil),      // 13: com.brewtab.queue.Segment.Header
	(*Segment_Entry)(nil),       // 14: com.brewtab.queue.Segment.Entry
	(*Segment_Metadata)(nil),    // 15: com.brewtab.queue.Segment.Metadata
	(*Segment_Entry_Key)(nil),   // 16: com.brewtab.queue.Segment.Entry.Key
	(*timestamp.Timestamp)(nil), // 17: google.protobuf.Timestamp
	(*empty.Empty)(nil),         // 18: google.protobuf.Empty
}
var file_proto_api_proto_depIdxs = []int32{
	17, // 0: com.brewtab.queue.EnqueueRequest.deadline:type_name -> google.protobuf.Timestamp
	17, // 1: com.brewtab.queue.EnqueueResponse.deadline:type_name -> google.protobuf.Timestamp
	17, // 2: com.brewtab.queue.Item.deadline:type_name -> google.protobuf.Timestamp
	4,  // 3: com.brewtab.queue.Item.stats:type_name -> com.brewtab.queue.Stats
	17, // 4: com.brewtab.queue.Stats.enqueue_time:type_name -> google.protobuf.Timestamp
	17, // 5: com.brewtab.queue.Stats.requeue_time:type_name -> google.protobuf.Timestamp
	17, // 6: com.brewtab.queue.RequeueRequest.deadline:type_name -> google.protobuf.Timestamp
	17, // 7: com.brewtab.queue.GlobalState.epoch:type_name -> google.protobuf.Timestamp
	16, // 8: com.brewtab.queue.Segment.Header.last_key:type_name -> com.brewtab.queue.Segment.Entry.Key
	3,  // 9: com.brewtab.queue.Segment.Entry.pending:type_name -> com.brewtab.queue.Item
	16, // 10: com.brewtab.queue.Segment.Entry.tombstone:type_name -> com.brewtab.queue.Segment.Entry.Key
	16, // 11: com.brewtab.queue.Segment.Metadata.first_key:type_name -> com.brewtab.queue.Segment.Entry.Key
	16, // 12: com.brewtab.queue.Segment.Metadata.last_key:type_name -> com.brewtab.queue.Segment.Entry.Key
	17, // 13: com.brewtab.queue.Segment.Entry.Key.deadline:type_name -> google.protobuf.Timestamp
	0,  // 14: com.brewtab.queue.QueueServer.Enqueue:input_type -> com.brewtab.queue.EnqueueRequest
	0,  // 15: com.brewtab.queue.QueueServer.EnqueueStream:input_type -> com.brewtab.queue.EnqueueRequest
	2,  // 16: com.brewtab.queue.QueueServer.Dequeue:input_type -> com.brewtab.queue.DequeueRequest
	5,  // 17: com.brewtab.queue.QueueServer.Requeue:input_type -> com.brewtab.queue.RequeueRequest
	7,  // 18: com.brewtab.queue.QueueServer.Release:input_type -> com.brewtab.queue.ReleaseRequest
	8,  // 19: com.brewtab.queue.QueueServer.GetQueueInfo:input_type -> com.brewtab.queue.GetQueueInfoRequest
	10, // 20: com.brewtab.queue.QueueServer.DropQueue:input_type -> com.brewtab.queue.DropQueueRequest
	1,  // 21: com.brewtab.queue.QueueServer.Enqueue:output_type -> com.brewtab.queue.EnqueueResponse
	1,  // 22: com.brewtab.queue.QueueServer.EnqueueStream:output_type -> com.brewtab.queue.EnqueueResponse
	3,  // 23: com.brewtab.queue.QueueServer.Dequeue:output_type -> com.brewtab.queue.Item
	6,  // 24: com.brewtab.queue.QueueServer.Requeue:output_type -> com.brewtab.queue.RequeueResponse
	18, // 25: com.brewtab.queue.QueueServer.Release:output_type -> google.protobuf.Empty
	9,  // 26: com.brewtab.queue.QueueServer.GetQueueInfo:output_type -> com.brewtab.queue.QueueInfo
	18, // 27: com.brewtab.queue.QueueServer.DropQueue:output_type -> google.protobuf.Empty
	21, // [21:28] is the sub-list for method output_type
	14, // [14:21] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_proto_api_proto_init() }
func file_proto_api_proto_init() {
	if File_proto_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequeueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequeueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueueInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment_Entry_Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_api_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Segment_Entry_Pending)(nil),
		(*Segment_Entry_Tombstone)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_api_proto_goTypes,
		DependencyIndexes: file_proto_api_proto_depIdxs,
		MessageInfos:      file_proto_api_proto_msgTypes,
	}.Build()
	File_proto_api_proto = out.File
	file_proto_api_proto_rawDesc = nil
	file_proto_api_proto_goTypes = nil
	file_proto_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QueueServerClient is the client API for QueueServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueueServerClient interface {
	Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error)
	EnqueueStream(ctx context.Context, opts ...grpc.CallOption) (QueueServer_EnqueueStreamClient, error)
	Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*Item, error)
	Requeue(ctx context.Context, in *RequeueRequest, opts ...grpc.CallOption) (*RequeueResponse, error)
	Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetQueueInfo(ctx context.Context, in *GetQueueInfoRequest, opts ...grpc.CallOption) (*QueueInfo, error)
	DropQueue(ctx context.Context, in *DropQueueRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type queueServerClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueServerClient(cc grpc.ClientConnInterface) QueueServerClient {
	return &queueServerClient{cc}
}

func (c *queueServerClient) Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error) {
	out := new(EnqueueResponse)
	err := c.cc.Invoke(ctx, "/com.brewtab.queue.QueueServer/Enqueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServerClient) EnqueueStream(ctx context.Context, opts ...grpc.CallOption) (QueueServer_EnqueueStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QueueServer_serviceDesc.Streams[0], "/com.brewtab.queue.QueueServer/EnqueueStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &queueServerEnqueueStreamClient{stream}
	return x, nil
}

type QueueServer_EnqueueStreamClient interface {
	Send(*EnqueueRequest) error
	Recv() (*EnqueueResponse, error)
	grpc.ClientStream
}

type queueServerEnqueueStreamClient struct {
	grpc.ClientStream
}

func (x *queueServerEnqueueStreamClient) Send(m *EnqueueRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queueServerEnqueueStreamClient) Recv() (*EnqueueResponse, error) {
	m := new(EnqueueResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queueServerClient) Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/com.brewtab.queue.QueueServer/Dequeue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServerClient) Requeue(ctx context.Context, in *RequeueRequest, opts ...grpc.CallOption) (*RequeueResponse, error) {
	out := new(RequeueResponse)
	err := c.cc.Invoke(ctx, "/com.brewtab.queue.QueueServer/Requeue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServerClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.brewtab.queue.QueueServer/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServerClient) GetQueueInfo(ctx context.Context, in *GetQueueInfoRequest, opts ...grpc.CallOption) (*QueueInfo, error) {
	out := new(QueueInfo)
	err := c.cc.Invoke(ctx, "/com.brewtab.queue.QueueServer/GetQueueInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServerClient) DropQueue(ctx context.Context, in *DropQueueRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.brewtab.queue.QueueServer/DropQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServerServer is the server API for QueueServer service.
type QueueServerServer interface {
	Enqueue(context.Context, *EnqueueRequest) (*EnqueueResponse, error)
	EnqueueStream(QueueServer_EnqueueStreamServer) error
	Dequeue(context.Context, *DequeueRequest) (*Item, error)
	Requeue(context.Context, *RequeueRequest) (*RequeueResponse, error)
	Release(context.Context, *ReleaseRequest) (*empty.Empty, error)
	GetQueueInfo(context.Context, *GetQueueInfoRequest) (*QueueInfo, error)
	DropQueue(context.Context, *DropQueueRequest) (*empty.Empty, error)
}

// UnimplementedQueueServerServer can be embedded to have forward compatible implementations.
type UnimplementedQueueServerServer struct {
}

func (*UnimplementedQueueServerServer) Enqueue(context.Context, *EnqueueRequest) (*EnqueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (*UnimplementedQueueServerServer) EnqueueStream(QueueServer_EnqueueStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EnqueueStream not implemented")
}
func (*UnimplementedQueueServerServer) Dequeue(context.Context, *DequeueRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (*UnimplementedQueueServerServer) Requeue(context.Context, *RequeueRequest) (*RequeueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Requeue not implemented")
}
func (*UnimplementedQueueServerServer) Release(context.Context, *ReleaseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (*UnimplementedQueueServerServer) GetQueueInfo(context.Context, *GetQueueInfoRequest) (*QueueInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueInfo not implemented")
}
func (*UnimplementedQueueServerServer) DropQueue(context.Context, *DropQueueRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropQueue not implemented")
}

func RegisterQueueServerServer(s *grpc.Server, srv QueueServerServer) {
	s.RegisterService(&_QueueServer_serviceDesc, srv)
}

func _QueueServer_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServerServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.brewtab.queue.QueueServer/Enqueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServerServer).Enqueue(ctx, req.(*EnqueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueServer_EnqueueStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueueServerServer).EnqueueStream(&queueServerEnqueueStreamServer{stream})
}

type QueueServer_EnqueueStreamServer interface {
	Send(*EnqueueResponse) error
	Recv() (*EnqueueRequest, error)
	grpc.ServerStream
}

type queueServerEnqueueStreamServer struct {
	grpc.ServerStream
}

func (x *queueServerEnqueueStreamServer) Send(m *EnqueueResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queueServerEnqueueStreamServer) Recv() (*EnqueueRequest, error) {
	m := new(EnqueueRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _QueueServer_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DequeueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServerServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.brewtab.queue.QueueServer/Dequeue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServerServer).Dequeue(ctx, req.(*DequeueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueServer_Requeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequeueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServerServer).Requeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.brewtab.queue.QueueServer/Requeue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServerServer).Requeue(ctx, req.(*RequeueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueServer_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServerServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.brewtab.queue.QueueServer/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServerServer).Release(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueServer_GetQueueInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServerServer).GetQueueInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.brewtab.queue.QueueServer/GetQueueInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServerServer).GetQueueInfo(ctx, req.(*GetQueueInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueServer_DropQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServerServer).DropQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.brewtab.queue.QueueServer/DropQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServerServer).DropQueue(ctx, req.(*DropQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueueServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.brewtab.queue.QueueServer",
	HandlerType: (*QueueServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enqueue",
			Handler:    _QueueServer_Enqueue_Handler,
		},
		{
			MethodName: "Dequeue",
			Handler:    _QueueServer_Dequeue_Handler,
		},
		{
			MethodName: "Requeue",
			Handler:    _QueueServer_Requeue_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _QueueServer_Release_Handler,
		},
		{
			MethodName: "GetQueueInfo",
			Handler:    _QueueServer_GetQueueInfo_Handler,
		},
		{
			MethodName: "DropQueue",
			Handler:    _QueueServer_DropQueue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnqueueStream",
			Handler:       _QueueServer_EnqueueStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/api.proto",
}
